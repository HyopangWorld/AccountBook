package accountBook;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.mysql.jdbc.ResultSetMetaData;

public class DB_Input {
	Connection connection;
	Statement statment;
	ResultSet resultSet;
	String queryString;
	
	String driverName = "org.gjt.mm.mysql.Driver";
	String url = "jdbc:mysql://localhost:3306/Account_DB?useUnicode=true&characterEncoding=utf8&useSSL = false"; // jdbc:mysql://localhost:3306/DB이름 이 들어가야함
	String user = "account"; // 자신의 id
	String password = "account"; // 자신의 pass
	
	
	//DB로드 메소드
	public DB_Input(){
		try{Class.forName(driverName);}
		catch (ClassNotFoundException e){System.out.println("[로드 오류]\n" + e.getStackTrace());}
	}
	
	
	//Table Create 메서드
	public void tableCreate(String id){
		try{
		queryString = "CREATE TABLE calender_info_"+id+" ("
				+ "cnt int(3) auto_increment,"
				+ "date date,"
				+ "inOrout varchar(40),"
				+ "money int(20),"
				+ "p_use varchar(100),"
				+ "primary key(cnt))DEFAULT CHARSET=utf8";
		connect();
		
		// ③ 실행 [CRUD]
		statment.executeUpdate(queryString);
		System.out.println("Create Table");
		
		}catch (SQLException e){
			System.out.println("[create 쿼리 오류]\n" + e.getStackTrace());
		}finally{
			// ④ 닫기
			closeDatabase();
		}
	}

	
	//Insert메서드
	public void productInsert(String queryString) {
		try{
			connect();
			System.out.println(queryString);
			// ③ 실행 [CRUD]
			statment.executeUpdate(queryString);
			System.out.println("Insert Table");
			
		}catch (SQLException e){
			System.out.println("[insert 쿼리 오류]\n" + e.getStackTrace());
		}finally{
			// ④ 닫기
			closeDatabase();
		}
	}
	int cnt=0;
	public String[] productSelectArray(String what, String queryString){
		String[] arrayResult = new String[cnt];
		int i=0;

		try {
		if(what == "getP_use"){
			while(resultSet.next()){arrayResult[i] = resultSet.getString("p_use");i++; System.out.println(arrayResult[i]);}
		}else if(what == "getInOrOut"){
			while(resultSet.next()){arrayResult[i] = resultSet.getString("inOrout"); i++;}
		}else if(what == "getMoney"){
			while(resultSet.next()){arrayResult[i] = resultSet.getString("money"); i++;}
		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
//		for(int k=0; k<cnt; k++){
//			System.out.println(arrayResult[k]);
//		}System.out.println("");
		return arrayResult;
		
	}
	
	//select query메서드
	public String productSelect(String what, String queryString){
		String result = "";
		try{
			connect();
			System.out.println(queryString);
			// ③ 실행 [CRUD]
			resultSet = statment.executeQuery(queryString);
			
				if(what == "getPass"){
					while(resultSet.next()){result = resultSet.getString("u_pass");}
				}else if(what == "getId"){
					while(resultSet.next()){result = resultSet.getString("id");}
				}else if(what == "getDuplicate"){
					while(resultSet.next()){result = resultSet.getString("u_id");}
				}else if(what == "getBalance"){
					while(resultSet.next()){result = resultSet.getString("balance");}
				}else if(what == "getClub"){
					while(resultSet.next()){result = resultSet.getString("club_name");}
				}else if(what == "getClubMember"){
					while(resultSet.next()){result = resultSet.getString("club_member");}
				}else if(what == "getCnt"){
					while(resultSet.next()){result = resultSet.getString("count(*)"); cnt = Integer.valueOf(result); }
				}
			

		}catch (SQLException e){
			System.out.println("[select 쿼리 오류]\n" + e.getStackTrace());
		}finally{
			// ④ 닫기
			closeDatabase();
		}
		return result;
	}
	
	
	//update & delete 메서드
	public int productUpdateDelete(String queryString){
		int resultValue = 0;
		try	{
			connect();
			// ③ 실행 [CRUD]
			resultValue = statment.executeUpdate(queryString);
		}catch (SQLException e){
			System.out.println("[update 쿼리 오류]\n" + e.getStackTrace());
		}finally{
			// ④ 닫기
			closeDatabase();
		}
		return resultValue;
	}
	
	
	//DB연결 전용 메서드
	public void connect() throws SQLException{
		// ② 연결 [Connection]
		connection = DriverManager.getConnection(url, user, password);
		// ② 연결 [Statement]
		statment = connection.createStatement();
	}
	
	
	//DB 닫는 메서드
	public void closeDatabase(){
		try{
			if( connection != null ){connection.close();}
			if( statment != null ){statment.close();}
			if( resultSet != null ){resultSet.close();}
		}catch (SQLException e){
			System.out.println("[닫기 오류]\n" +  e.getStackTrace());
		}
	}
	
}
